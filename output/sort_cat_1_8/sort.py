import numpy as np
import pandas as pd


def select_closest(keys, queries, predicate):
    scores = [[False for _ in keys] for _ in queries]
    for i, q in enumerate(queries):
        matches = [j for j, k in enumerate(keys) if predicate(q, k)]
        if not (any(matches)):
            scores[i][0] = True
        else:
            j = min(matches, key=lambda j: len(matches) if j == i else abs(i - j))
            scores[i][j] = True
    return scores


def aggregate(attention, values):
    return [[v for a, v in zip(attn, values) if a][0] for attn in attention]


def run(tokens):

    # classifier weights ##########################################
    classifier_weights = pd.read_csv(
        "output/sort_cat/sort_weights.csv", index_col=[0, 1], dtype={"feature": str}
    )
    # inputs #####################################################
    token_scores = classifier_weights.loc[[("tokens", str(v)) for v in tokens]]

    positions = list(range(len(tokens)))
    position_scores = classifier_weights.loc[[("positions", str(v)) for v in positions]]

    ones = [1 for _ in range(len(tokens))]
    one_scores = classifier_weights.loc[[("ones", "_") for v in ones]].mul(ones, axis=0)

    # attn_0_0 ####################################################
    def predicate_0_0(q_position, k_position):
        if q_position in {0, 22, 24, 28, 29}:
            return k_position == 2
        elif q_position in {1, 5, 15, 19, 27}:
            return k_position == 4
        elif q_position in {2, 8, 9, 13, 14, 21}:
            return k_position == 1
        elif q_position in {3, 6, 23}:
            return k_position == 5
        elif q_position in {4}:
            return k_position == 3
        elif q_position in {25, 20, 7}:
            return k_position == 6
        elif q_position in {10, 18}:
            return k_position == 14
        elif q_position in {11}:
            return k_position == 10
        elif q_position in {16, 12}:
            return k_position == 13
        elif q_position in {17}:
            return k_position == 12
        elif q_position in {26}:
            return k_position == 8
        elif q_position in {30}:
            return k_position == 21
        elif q_position in {31}:
            return k_position == 29

    attn_0_0_pattern = select_closest(positions, positions, predicate_0_0)
    attn_0_0_outputs = aggregate(attn_0_0_pattern, tokens)
    attn_0_0_output_scores = classifier_weights.loc[
        [("attn_0_0_outputs", str(v)) for v in attn_0_0_outputs]
    ]

    # attn_0_1 ####################################################
    def predicate_0_1(q_position, k_position):
        if q_position in {0, 6}:
            return k_position == 1
        elif q_position in {1}:
            return k_position == 2
        elif q_position in {2, 29, 30, 31}:
            return k_position == 3
        elif q_position in {3}:
            return k_position == 4
        elif q_position in {4}:
            return k_position == 5
        elif q_position in {5, 7}:
            return k_position == 6
        elif q_position in {8, 25, 27, 21}:
            return k_position == 9
        elif q_position in {24, 9, 26, 17}:
            return k_position == 15
        elif q_position in {10, 18}:
            return k_position == 14
        elif q_position in {11}:
            return k_position == 28
        elif q_position in {12, 28, 14}:
            return k_position == 10
        elif q_position in {13, 15}:
            return k_position == 12
        elif q_position in {16}:
            return k_position == 23
        elif q_position in {19, 22}:
            return k_position == 8
        elif q_position in {20}:
            return k_position == 16
        elif q_position in {23}:
            return k_position == 20

    attn_0_1_pattern = select_closest(positions, positions, predicate_0_1)
    attn_0_1_outputs = aggregate(attn_0_1_pattern, tokens)
    attn_0_1_output_scores = classifier_weights.loc[
        [("attn_0_1_outputs", str(v)) for v in attn_0_1_outputs]
    ]

    # mlp_0_0 #####################################################
    def mlp_0_0(position, attn_0_0_output):
        key = (position, attn_0_0_output)
        if key in {
            (0, "15"),
            (0, "18"),
            (0, "20"),
            (0, "23"),
            (0, "24"),
            (0, "5"),
            (0, "6"),
            (2, "18"),
            (2, "23"),
            (2, "5"),
            (2, "6"),
            (2, "8"),
            (3, "18"),
            (3, "28"),
            (3, "5"),
            (3, "9"),
            (4, "18"),
            (4, "5"),
            (5, "18"),
            (5, "5"),
            (6, "18"),
            (7, "18"),
            (7, "5"),
            (7, "8"),
            (8, "18"),
            (8, "2"),
            (8, "23"),
            (8, "27"),
            (8, "5"),
            (8, "6"),
            (8, "8"),
            (8, "9"),
            (9, "18"),
            (9, "23"),
            (9, "5"),
            (9, "8"),
            (9, "9"),
            (10, "18"),
            (10, "23"),
            (10, "5"),
            (10, "8"),
            (10, "9"),
            (11, "18"),
            (11, "23"),
            (11, "5"),
            (11, "8"),
            (11, "9"),
            (12, "18"),
            (12, "23"),
            (12, "27"),
            (12, "5"),
            (12, "6"),
            (12, "8"),
            (12, "9"),
            (13, "17"),
            (13, "18"),
            (13, "19"),
            (13, "23"),
            (13, "25"),
            (13, "27"),
            (13, "28"),
            (13, "3"),
            (13, "5"),
            (13, "6"),
            (13, "7"),
            (13, "8"),
            (13, "9"),
            (13, "<s>"),
            (14, "15"),
            (14, "17"),
            (14, "18"),
            (14, "19"),
            (14, "23"),
            (14, "24"),
            (14, "27"),
            (14, "28"),
            (14, "3"),
            (14, "5"),
            (14, "6"),
            (14, "8"),
            (14, "9"),
            (15, "18"),
            (15, "23"),
            (15, "25"),
            (15, "5"),
            (15, "6"),
            (15, "8"),
            (15, "9"),
            (16, "15"),
            (16, "18"),
            (16, "23"),
            (16, "24"),
            (16, "3"),
            (16, "5"),
            (16, "8"),
            (16, "9"),
            (17, "15"),
            (17, "18"),
            (17, "19"),
            (17, "23"),
            (17, "24"),
            (17, "28"),
            (17, "3"),
            (17, "5"),
            (17, "6"),
            (17, "7"),
            (17, "8"),
            (17, "9"),
            (18, "18"),
            (18, "23"),
            (18, "28"),
            (18, "5"),
            (18, "8"),
            (18, "9"),
            (19, "15"),
            (19, "17"),
            (19, "18"),
            (19, "19"),
            (19, "2"),
            (19, "23"),
            (19, "24"),
            (19, "25"),
            (19, "27"),
            (19, "28"),
            (19, "3"),
            (19, "5"),
            (19, "6"),
            (19, "7"),
            (19, "8"),
            (19, "9"),
            (20, "18"),
            (20, "23"),
            (20, "5"),
            (20, "6"),
            (20, "8"),
            (20, "9"),
            (21, "18"),
            (21, "19"),
            (21, "23"),
            (21, "27"),
            (21, "3"),
            (21, "5"),
            (21, "6"),
            (21, "8"),
            (21, "9"),
            (22, "15"),
            (22, "18"),
            (22, "23"),
            (22, "24"),
            (22, "27"),
            (22, "28"),
            (22, "3"),
            (22, "5"),
            (22, "6"),
            (22, "8"),
            (22, "9"),
            (23, "18"),
            (23, "23"),
            (23, "5"),
            (23, "8"),
            (24, "18"),
            (24, "23"),
            (24, "5"),
            (24, "6"),
            (24, "8"),
            (24, "9"),
            (25, "17"),
            (25, "18"),
            (25, "23"),
            (25, "3"),
            (25, "5"),
            (25, "6"),
            (25, "8"),
            (25, "9"),
            (26, "17"),
            (26, "18"),
            (26, "19"),
            (26, "20"),
            (26, "24"),
            (26, "27"),
            (26, "3"),
            (27, "15"),
            (27, "18"),
            (27, "23"),
            (27, "5"),
            (27, "6"),
            (27, "8"),
            (28, "15"),
            (28, "17"),
            (28, "18"),
            (28, "19"),
            (28, "20"),
            (28, "21"),
            (28, "23"),
            (28, "24"),
            (28, "26"),
            (28, "27"),
            (28, "28"),
            (28, "3"),
            (28, "5"),
            (28, "6"),
            (28, "8"),
            (28, "9"),
            (28, "<s>"),
            (29, "17"),
            (29, "18"),
            (29, "23"),
            (29, "24"),
            (29, "27"),
            (29, "3"),
            (29, "5"),
            (29, "6"),
            (29, "8"),
            (29, "9"),
            (30, "15"),
            (30, "16"),
            (30, "17"),
            (30, "18"),
            (30, "19"),
            (30, "2"),
            (30, "20"),
            (30, "22"),
            (30, "23"),
            (30, "24"),
            (30, "27"),
            (30, "28"),
            (30, "3"),
            (30, "4"),
            (30, "5"),
            (30, "6"),
            (30, "7"),
            (30, "8"),
            (30, "9"),
            (30, "<s>"),
            (31, "18"),
            (31, "23"),
            (31, "27"),
            (31, "5"),
            (31, "6"),
            (31, "8"),
            (31, "9"),
        }:
            return 29
        elif key in {
            (0, "1"),
            (0, "10"),
            (0, "11"),
            (0, "12"),
            (0, "13"),
            (0, "14"),
            (0, "16"),
            (0, "27"),
            (2, "11"),
            (2, "12"),
            (2, "13"),
            (2, "16"),
            (3, "11"),
            (3, "12"),
            (3, "13"),
            (3, "14"),
            (3, "15"),
            (3, "16"),
            (3, "19"),
            (3, "2"),
            (3, "22"),
            (3, "23"),
            (3, "27"),
            (3, "3"),
            (3, "6"),
            (3, "<s>"),
            (4, "0"),
            (4, "1"),
            (4, "10"),
            (4, "11"),
            (4, "12"),
            (4, "13"),
            (4, "14"),
            (4, "15"),
            (4, "16"),
            (4, "17"),
            (4, "19"),
            (4, "2"),
            (4, "20"),
            (4, "21"),
            (4, "22"),
            (4, "23"),
            (4, "24"),
            (4, "25"),
            (4, "27"),
            (4, "28"),
            (4, "3"),
            (4, "4"),
            (4, "6"),
            (4, "7"),
            (4, "<s>"),
            (5, "0"),
            (5, "1"),
            (5, "10"),
            (5, "11"),
            (5, "12"),
            (5, "13"),
            (5, "14"),
            (5, "15"),
            (5, "16"),
            (5, "17"),
            (5, "19"),
            (5, "2"),
            (5, "20"),
            (5, "21"),
            (5, "22"),
            (5, "23"),
            (5, "24"),
            (5, "25"),
            (5, "27"),
            (5, "28"),
            (5, "3"),
            (5, "6"),
            (5, "7"),
            (5, "8"),
            (5, "9"),
            (5, "<s>"),
            (6, "1"),
            (6, "10"),
            (6, "11"),
            (6, "12"),
            (6, "13"),
            (6, "14"),
            (6, "15"),
            (6, "16"),
            (6, "19"),
            (6, "2"),
            (6, "20"),
            (6, "21"),
            (6, "22"),
            (6, "23"),
            (6, "24"),
            (6, "27"),
            (6, "28"),
            (6, "3"),
            (6, "<s>"),
            (7, "11"),
            (7, "12"),
            (7, "13"),
            (7, "16"),
            (7, "23"),
            (7, "6"),
            (8, "11"),
            (8, "12"),
            (8, "13"),
            (8, "16"),
            (9, "11"),
            (9, "12"),
            (9, "13"),
            (9, "15"),
            (9, "16"),
            (9, "2"),
            (9, "25"),
            (9, "27"),
            (9, "6"),
            (10, "11"),
            (10, "12"),
            (10, "13"),
            (10, "16"),
            (10, "6"),
            (11, "11"),
            (11, "12"),
            (11, "13"),
            (11, "15"),
            (11, "16"),
            (11, "2"),
            (11, "25"),
            (11, "27"),
            (11, "6"),
            (12, "11"),
            (12, "12"),
            (12, "13"),
            (12, "16"),
            (13, "11"),
            (13, "12"),
            (13, "13"),
            (13, "16"),
            (14, "11"),
            (14, "12"),
            (14, "13"),
            (14, "16"),
            (15, "11"),
            (15, "12"),
            (15, "13"),
            (15, "16"),
            (16, "11"),
            (16, "12"),
            (16, "13"),
            (16, "16"),
            (16, "2"),
            (16, "27"),
            (16, "6"),
            (17, "11"),
            (17, "12"),
            (17, "13"),
            (17, "16"),
            (17, "27"),
            (18, "11"),
            (18, "12"),
            (18, "13"),
            (18, "15"),
            (18, "16"),
            (18, "2"),
            (18, "27"),
            (18, "6"),
            (18, "<s>"),
            (19, "11"),
            (19, "12"),
            (19, "13"),
            (19, "16"),
            (20, "11"),
            (20, "12"),
            (20, "13"),
            (20, "16"),
            (20, "27"),
            (21, "11"),
            (21, "12"),
            (21, "13"),
            (21, "16"),
            (22, "11"),
            (22, "12"),
            (22, "13"),
            (22, "16"),
            (23, "11"),
            (23, "12"),
            (23, "13"),
            (23, "16"),
            (23, "27"),
            (23, "6"),
            (24, "11"),
            (24, "12"),
            (24, "13"),
            (24, "16"),
            (25, "11"),
            (25, "12"),
            (25, "13"),
            (25, "16"),
            (26, "11"),
            (26, "12"),
            (26, "13"),
            (26, "16"),
            (27, "11"),
            (27, "12"),
            (27, "13"),
            (27, "16"),
            (28, "11"),
            (28, "12"),
            (28, "13"),
            (28, "16"),
            (29, "11"),
            (29, "12"),
            (29, "16"),
            (31, "11"),
            (31, "12"),
            (31, "13"),
            (31, "16"),
        }:
            return 12
        elif key in {
            (0, "17"),
            (0, "19"),
            (0, "25"),
            (0, "28"),
            (0, "3"),
            (0, "4"),
            (0, "7"),
            (0, "8"),
            (0, "9"),
            (0, "</s>"),
            (2, "</s>"),
            (3, "25"),
            (3, "</s>"),
            (4, "8"),
            (4, "9"),
            (4, "</s>"),
            (5, "</s>"),
            (6, "17"),
            (6, "25"),
            (6, "4"),
            (6, "5"),
            (6, "6"),
            (6, "7"),
            (6, "8"),
            (6, "9"),
            (6, "</s>"),
            (7, "25"),
            (7, "</s>"),
            (8, "25"),
            (8, "</s>"),
            (9, "</s>"),
            (10, "25"),
            (10, "</s>"),
            (11, "</s>"),
            (12, "25"),
            (12, "</s>"),
            (13, "</s>"),
            (14, "25"),
            (14, "</s>"),
            (15, "</s>"),
            (16, "25"),
            (16, "</s>"),
            (17, "25"),
            (17, "</s>"),
            (18, "25"),
            (18, "</s>"),
            (19, "</s>"),
            (20, "25"),
            (20, "</s>"),
            (21, "25"),
            (21, "</s>"),
            (22, "25"),
            (22, "</s>"),
            (23, "25"),
            (23, "</s>"),
            (24, "25"),
            (24, "</s>"),
            (25, "</s>"),
            (26, "25"),
            (26, "26"),
            (26, "</s>"),
            (27, "</s>"),
            (28, "25"),
            (28, "</s>"),
            (29, "25"),
            (29, "</s>"),
            (30, "11"),
            (30, "12"),
            (30, "13"),
            (30, "25"),
            (30, "</s>"),
            (31, "25"),
            (31, "</s>"),
        }:
            return 25
        elif key in {
            (0, "0"),
            (1, "0"),
            (1, "15"),
            (1, "16"),
            (1, "17"),
            (1, "18"),
            (1, "19"),
            (1, "2"),
            (1, "20"),
            (1, "21"),
            (1, "22"),
            (1, "23"),
            (1, "24"),
            (1, "25"),
            (1, "26"),
            (1, "27"),
            (1, "28"),
            (1, "3"),
            (1, "4"),
            (1, "5"),
            (1, "6"),
            (1, "7"),
            (1, "8"),
            (1, "9"),
            (1, "</s>"),
            (1, "<s>"),
            (8, "0"),
            (10, "0"),
            (12, "0"),
            (12, "15"),
            (13, "0"),
            (13, "15"),
            (13, "2"),
            (14, "0"),
            (14, "2"),
            (17, "0"),
            (20, "0"),
            (21, "0"),
            (21, "15"),
            (21, "2"),
            (22, "0"),
            (25, "0"),
            (25, "15"),
            (25, "2"),
            (26, "0"),
            (26, "15"),
            (26, "2"),
            (26, "22"),
            (26, "23"),
            (26, "28"),
            (26, "5"),
            (26, "6"),
            (26, "8"),
            (26, "9"),
            (26, "<s>"),
            (28, "0"),
            (28, "2"),
            (29, "0"),
            (29, "15"),
            (29, "2"),
            (30, "0"),
            (31, "0"),
            (31, "15"),
            (31, "2"),
        }:
            return 31
        elif key in {
            (2, "25"),
            (2, "7"),
            (3, "7"),
            (7, "7"),
            (8, "7"),
            (9, "7"),
            (10, "7"),
            (11, "7"),
            (12, "7"),
            (14, "7"),
            (15, "7"),
            (16, "19"),
            (16, "7"),
            (18, "7"),
            (20, "7"),
            (21, "28"),
            (21, "7"),
            (22, "2"),
            (22, "7"),
            (23, "2"),
            (23, "7"),
            (23, "9"),
            (24, "19"),
            (24, "2"),
            (24, "27"),
            (24, "28"),
            (24, "7"),
            (25, "19"),
            (25, "24"),
            (25, "25"),
            (25, "27"),
            (25, "28"),
            (25, "7"),
            (26, "21"),
            (26, "4"),
            (26, "7"),
            (27, "17"),
            (27, "19"),
            (27, "2"),
            (27, "20"),
            (27, "21"),
            (27, "22"),
            (27, "24"),
            (27, "25"),
            (27, "27"),
            (27, "28"),
            (27, "3"),
            (27, "4"),
            (27, "7"),
            (27, "9"),
            (27, "<s>"),
            (28, "22"),
            (28, "4"),
            (28, "7"),
            (29, "19"),
            (29, "28"),
            (29, "7"),
            (31, "19"),
            (31, "7"),
        }:
            return 24
        elif key in {
            (1, "10"),
            (1, "11"),
            (2, "0"),
            (3, "0"),
            (3, "8"),
            (9, "0"),
            (11, "0"),
            (15, "0"),
            (16, "0"),
            (18, "0"),
            (19, "0"),
            (23, "0"),
            (24, "0"),
            (27, "0"),
        }:
            return 20
        elif key in {
            (1, "1"),
            (1, "12"),
            (1, "13"),
            (1, "14"),
            (6, "0"),
            (7, "0"),
            (13, "1"),
            (26, "1"),
            (29, "13"),
        }:
            return 10
        elif key in {
            (0, "2"),
            (0, "22"),
            (0, "26"),
            (4, "26"),
            (5, "26"),
            (5, "4"),
            (6, "26"),
        }:
            return 16
        return 15

    mlp_0_0_outputs = [mlp_0_0(k0, k1) for k0, k1 in zip(positions, attn_0_0_outputs)]
    mlp_0_0_output_scores = classifier_weights.loc[
        [("mlp_0_0_outputs", str(v)) for v in mlp_0_0_outputs]
    ]

    # mlp_0_1 #####################################################
    def mlp_0_1(position, attn_0_1_output):
        key = (position, attn_0_1_output)
        if key in {
            (0, "0"),
            (0, "1"),
            (0, "10"),
            (0, "11"),
            (0, "12"),
            (0, "14"),
            (0, "15"),
            (0, "16"),
            (0, "17"),
            (0, "18"),
            (0, "19"),
            (0, "2"),
            (0, "20"),
            (0, "21"),
            (0, "22"),
            (0, "23"),
            (0, "25"),
            (0, "26"),
            (0, "27"),
            (0, "28"),
            (0, "4"),
            (0, "5"),
            (0, "6"),
            (0, "8"),
            (0, "9"),
            (3, "0"),
            (3, "1"),
            (3, "10"),
            (3, "11"),
            (3, "12"),
            (3, "13"),
            (3, "14"),
            (3, "15"),
            (3, "16"),
            (3, "17"),
            (3, "18"),
            (3, "19"),
            (3, "2"),
            (3, "20"),
            (3, "21"),
            (3, "22"),
            (3, "23"),
            (3, "24"),
            (3, "25"),
            (3, "26"),
            (3, "27"),
            (3, "28"),
            (3, "3"),
            (3, "4"),
            (3, "5"),
            (3, "6"),
            (3, "7"),
            (3, "8"),
            (3, "9"),
            (3, "<s>"),
            (4, "0"),
            (4, "1"),
            (4, "10"),
            (4, "11"),
            (4, "12"),
            (4, "13"),
            (4, "14"),
            (4, "15"),
            (4, "16"),
            (4, "17"),
            (4, "18"),
            (4, "19"),
            (4, "2"),
            (4, "20"),
            (4, "21"),
            (4, "22"),
            (4, "23"),
            (4, "24"),
            (4, "25"),
            (4, "26"),
            (4, "27"),
            (4, "28"),
            (4, "3"),
            (4, "4"),
            (4, "5"),
            (4, "6"),
            (4, "7"),
            (4, "8"),
            (4, "9"),
            (7, "0"),
            (7, "1"),
            (7, "10"),
            (7, "11"),
            (7, "12"),
            (7, "13"),
            (7, "14"),
            (7, "15"),
            (7, "16"),
            (7, "17"),
            (7, "18"),
            (7, "19"),
            (7, "2"),
            (7, "20"),
            (7, "21"),
            (7, "22"),
            (7, "23"),
            (7, "24"),
            (7, "25"),
            (7, "26"),
            (7, "27"),
            (7, "28"),
            (7, "3"),
            (7, "4"),
            (7, "5"),
            (7, "6"),
            (7, "8"),
            (7, "9"),
            (7, "<s>"),
            (8, "0"),
            (8, "1"),
            (8, "10"),
            (8, "11"),
            (8, "12"),
            (8, "13"),
            (8, "14"),
            (8, "15"),
            (8, "16"),
            (8, "17"),
            (8, "18"),
            (8, "19"),
            (8, "2"),
            (8, "20"),
            (8, "21"),
            (8, "22"),
            (8, "24"),
            (8, "25"),
            (8, "26"),
            (8, "27"),
            (8, "28"),
            (8, "3"),
            (8, "4"),
            (8, "5"),
            (8, "6"),
            (8, "7"),
            (8, "8"),
            (8, "9"),
            (8, "<s>"),
            (9, "13"),
            (10, "13"),
            (10, "14"),
            (10, "15"),
            (10, "16"),
            (10, "17"),
            (10, "18"),
            (10, "4"),
            (10, "5"),
            (10, "8"),
            (11, "13"),
            (11, "14"),
            (11, "15"),
            (11, "16"),
            (11, "18"),
            (11, "24"),
            (11, "25"),
            (11, "8"),
            (12, "13"),
            (12, "14"),
            (12, "15"),
            (13, "13"),
            (13, "14"),
            (13, "15"),
            (13, "5"),
            (14, "13"),
            (14, "14"),
            (14, "15"),
            (15, "13"),
            (15, "15"),
            (16, "13"),
            (16, "15"),
            (17, "12"),
            (17, "13"),
            (17, "14"),
            (17, "15"),
            (17, "24"),
            (17, "4"),
            (17, "8"),
            (18, "11"),
            (18, "12"),
            (18, "13"),
            (18, "14"),
            (18, "15"),
            (18, "16"),
            (18, "17"),
            (18, "24"),
            (18, "25"),
            (18, "4"),
            (18, "5"),
            (18, "8"),
            (19, "13"),
            (19, "14"),
            (19, "15"),
            (19, "24"),
            (19, "25"),
            (20, "13"),
            (20, "15"),
            (21, "12"),
            (21, "13"),
            (21, "14"),
            (21, "15"),
            (21, "16"),
            (21, "17"),
            (21, "24"),
            (21, "25"),
            (21, "4"),
            (21, "5"),
            (21, "8"),
            (22, "13"),
            (22, "15"),
            (23, "11"),
            (23, "12"),
            (23, "13"),
            (23, "14"),
            (23, "15"),
            (23, "16"),
            (23, "17"),
            (23, "18"),
            (23, "24"),
            (23, "25"),
            (23, "4"),
            (23, "5"),
            (23, "8"),
            (24, "12"),
            (24, "13"),
            (24, "14"),
            (24, "15"),
            (24, "16"),
            (24, "17"),
            (24, "18"),
            (24, "20"),
            (24, "22"),
            (24, "24"),
            (24, "25"),
            (24, "28"),
            (24, "4"),
            (24, "5"),
            (24, "8"),
            (24, "<s>"),
            (25, "11"),
            (25, "12"),
            (25, "13"),
            (25, "14"),
            (25, "15"),
            (25, "16"),
            (25, "17"),
            (25, "18"),
            (25, "24"),
            (25, "25"),
            (25, "27"),
            (25, "4"),
            (25, "5"),
            (25, "8"),
            (26, "12"),
            (26, "13"),
            (26, "14"),
            (26, "15"),
            (26, "24"),
            (26, "5"),
            (27, "12"),
            (27, "13"),
            (27, "14"),
            (27, "15"),
            (27, "24"),
            (27, "5"),
            (28, "13"),
            (28, "14"),
            (28, "15"),
            (29, "11"),
            (29, "12"),
            (29, "13"),
            (29, "14"),
            (29, "15"),
            (29, "16"),
            (29, "17"),
            (29, "18"),
            (29, "20"),
            (29, "22"),
            (29, "24"),
            (29, "25"),
            (29, "27"),
            (29, "4"),
            (29, "5"),
            (29, "8"),
            (29, "9"),
            (29, "<s>"),
            (30, "13"),
            (30, "15"),
            (31, "13"),
            (31, "14"),
            (31, "15"),
            (31, "5"),
        }:
            return 13
        elif key in {
            (1, "0"),
            (1, "1"),
            (1, "10"),
            (1, "11"),
            (1, "14"),
            (1, "16"),
            (1, "17"),
            (1, "18"),
            (1, "19"),
            (1, "2"),
            (1, "20"),
            (1, "21"),
            (1, "22"),
            (1, "23"),
            (1, "24"),
            (1, "25"),
            (1, "26"),
            (1, "27"),
            (1, "28"),
            (1, "3"),
            (1, "4"),
            (1, "5"),
            (1, "6"),
            (1, "7"),
            (1, "8"),
            (1, "9"),
            (1, "</s>"),
            (1, "<s>"),
            (9, "0"),
            (9, "10"),
            (9, "14"),
            (9, "18"),
            (9, "24"),
            (9, "27"),
            (9, "28"),
            (9, "4"),
            (9, "5"),
            (9, "8"),
            (9, "<s>"),
            (10, "0"),
            (10, "11"),
            (10, "24"),
            (10, "27"),
            (10, "28"),
            (11, "27"),
            (11, "5"),
            (12, "5"),
            (13, "24"),
            (13, "27"),
            (14, "11"),
            (14, "18"),
            (14, "24"),
            (14, "27"),
            (14, "5"),
            (15, "0"),
            (15, "10"),
            (15, "11"),
            (15, "14"),
            (15, "16"),
            (15, "17"),
            (15, "18"),
            (15, "19"),
            (15, "20"),
            (15, "21"),
            (15, "22"),
            (15, "24"),
            (15, "26"),
            (15, "27"),
            (15, "28"),
            (15, "4"),
            (15, "5"),
            (15, "6"),
            (15, "8"),
            (15, "</s>"),
            (15, "<s>"),
            (16, "14"),
            (16, "5"),
            (17, "0"),
            (17, "11"),
            (17, "16"),
            (17, "18"),
            (17, "27"),
            (17, "5"),
            (18, "18"),
            (18, "27"),
            (18, "28"),
            (19, "0"),
            (19, "11"),
            (19, "16"),
            (19, "18"),
            (19, "26"),
            (19, "27"),
            (19, "28"),
            (19, "4"),
            (19, "5"),
            (19, "8"),
            (19, "<s>"),
            (20, "0"),
            (20, "11"),
            (20, "14"),
            (20, "16"),
            (20, "18"),
            (20, "22"),
            (20, "24"),
            (20, "26"),
            (20, "27"),
            (20, "28"),
            (20, "4"),
            (20, "5"),
            (20, "8"),
            (21, "11"),
            (21, "18"),
            (21, "27"),
            (22, "11"),
            (22, "14"),
            (22, "18"),
            (22, "24"),
            (22, "27"),
            (22, "5"),
            (23, "27"),
            (24, "0"),
            (24, "10"),
            (24, "11"),
            (24, "27"),
            (26, "18"),
            (27, "27"),
            (28, "18"),
            (28, "27"),
            (28, "5"),
            (29, "0"),
            (29, "19"),
            (29, "28"),
            (30, "14"),
            (30, "16"),
            (30, "18"),
            (30, "27"),
            (30, "28"),
            (30, "5"),
        }:
            return 3
        elif key in {
            (0, "13"),
            (5, "0"),
            (5, "1"),
            (5, "10"),
            (5, "11"),
            (5, "12"),
            (5, "13"),
            (5, "14"),
            (5, "15"),
            (5, "16"),
            (5, "17"),
            (5, "18"),
            (5, "19"),
            (5, "2"),
            (5, "20"),
            (5, "21"),
            (5, "22"),
            (5, "23"),
            (5, "24"),
            (5, "25"),
            (5, "26"),
            (5, "27"),
            (5, "28"),
            (5, "3"),
            (5, "4"),
            (5, "5"),
            (5, "6"),
            (5, "7"),
            (5, "8"),
            (5, "9"),
            (5, "</s>"),
            (5, "<s>"),
            (6, "0"),
            (6, "1"),
            (6, "10"),
            (6, "11"),
            (6, "12"),
            (6, "13"),
            (6, "14"),
            (6, "15"),
            (6, "16"),
            (6, "17"),
            (6, "18"),
            (6, "19"),
            (6, "2"),
            (6, "20"),
            (6, "21"),
            (6, "22"),
            (6, "23"),
            (6, "24"),
            (6, "25"),
            (6, "26"),
            (6, "27"),
            (6, "28"),
            (6, "3"),
            (6, "4"),
            (6, "5"),
            (6, "6"),
            (6, "7"),
            (6, "8"),
            (6, "9"),
            (6, "</s>"),
            (6, "<s>"),
        }:
            return 5
        elif key in {
            (1, "12"),
            (1, "13"),
            (1, "15"),
            (8, "23"),
            (8, "</s>"),
            (9, "11"),
            (9, "12"),
            (9, "15"),
            (9, "16"),
            (10, "12"),
            (11, "12"),
            (12, "12"),
            (13, "12"),
            (14, "12"),
            (15, "12"),
            (19, "12"),
            (20, "12"),
            (22, "12"),
            (28, "12"),
            (30, "12"),
            (31, "12"),
        }:
            return 20
        elif key in {
            (0, "24"),
            (0, "</s>"),
            (0, "<s>"),
            (3, "</s>"),
            (4, "</s>"),
            (4, "<s>"),
        }:
            return 29
        return 23

    mlp_0_1_outputs = [mlp_0_1(k0, k1) for k0, k1 in zip(positions, attn_0_1_outputs)]
    mlp_0_1_output_scores = classifier_weights.loc[
        [("mlp_0_1_outputs", str(v)) for v in mlp_0_1_outputs]
    ]

    # attn_1_0 ####################################################
    def predicate_1_0(q_position, k_position):
        if q_position in {0, 5, 6}:
            return k_position == 2
        elif q_position in {1, 20}:
            return k_position == 3
        elif q_position in {2, 30}:
            return k_position == 4
        elif q_position in {3, 4, 9, 10, 31}:
            return k_position == 1
        elif q_position in {7}:
            return k_position == 5
        elif q_position in {8, 22, 15}:
            return k_position == 20
        elif q_position in {17, 18, 11}:
            return k_position == 19
        elif q_position in {12, 23}:
            return k_position == 13
        elif q_position in {24, 13}:
            return k_position == 14
        elif q_position in {28, 14}:
            return k_position == 18
        elif q_position in {16, 27, 21}:
            return k_position == 23
        elif q_position in {26, 19}:
            return k_position == 10
        elif q_position in {25, 29}:
            return k_position == 21

    attn_1_0_pattern = select_closest(positions, positions, predicate_1_0)
    attn_1_0_outputs = aggregate(attn_1_0_pattern, tokens)
    attn_1_0_output_scores = classifier_weights.loc[
        [("attn_1_0_outputs", str(v)) for v in attn_1_0_outputs]
    ]

    # attn_1_1 ####################################################
    def predicate_1_1(mlp_0_1_output, position):
        if mlp_0_1_output in {0, 8, 10}:
            return position == 1
        elif mlp_0_1_output in {1, 2, 20}:
            return position == 4
        elif mlp_0_1_output in {19, 3, 4}:
            return position == 2
        elif mlp_0_1_output in {25, 5}:
            return position == 28
        elif mlp_0_1_output in {6}:
            return position == 29
        elif mlp_0_1_output in {9, 12, 7}:
            return position == 8
        elif mlp_0_1_output in {11, 14}:
            return position == 9
        elif mlp_0_1_output in {28, 13, 31}:
            return position == 6
        elif mlp_0_1_output in {15}:
            return position == 12
        elif mlp_0_1_output in {16}:
            return position == 23
        elif mlp_0_1_output in {17}:
            return position == 13
        elif mlp_0_1_output in {18, 22}:
            return position == 19
        elif mlp_0_1_output in {21}:
            return position == 16
        elif mlp_0_1_output in {26, 23}:
            return position == 3
        elif mlp_0_1_output in {24}:
            return position == 10
        elif mlp_0_1_output in {27}:
            return position == 22
        elif mlp_0_1_output in {29}:
            return position == 27
        elif mlp_0_1_output in {30}:
            return position == 25

    attn_1_1_pattern = select_closest(positions, mlp_0_1_outputs, predicate_1_1)
    attn_1_1_outputs = aggregate(attn_1_1_pattern, tokens)
    attn_1_1_output_scores = classifier_weights.loc[
        [("attn_1_1_outputs", str(v)) for v in attn_1_1_outputs]
    ]

    # mlp_1_0 #####################################################
    def mlp_1_0(attn_1_1_output, token):
        key = (attn_1_1_output, token)
        if key in {
            ("0", "1"),
            ("0", "12"),
            ("0", "13"),
            ("0", "15"),
            ("0", "16"),
            ("0", "19"),
            ("0", "2"),
            ("0", "20"),
            ("0", "22"),
            ("0", "23"),
            ("1", "1"),
            ("1", "15"),
            ("1", "19"),
            ("1", "22"),
            ("1", "23"),
            ("10", "1"),
            ("10", "10"),
            ("10", "12"),
            ("10", "13"),
            ("10", "15"),
            ("10", "16"),
            ("10", "17"),
            ("10", "19"),
            ("10", "2"),
            ("10", "20"),
            ("10", "22"),
            ("10", "23"),
            ("10", "25"),
            ("11", "19"),
            ("11", "22"),
            ("11", "23"),
            ("12", "1"),
            ("12", "13"),
            ("12", "15"),
            ("12", "16"),
            ("12", "19"),
            ("12", "2"),
            ("12", "22"),
            ("12", "23"),
            ("13", "1"),
            ("13", "13"),
            ("13", "15"),
            ("13", "16"),
            ("13", "17"),
            ("13", "19"),
            ("13", "2"),
            ("13", "23"),
            ("15", "0"),
            ("15", "1"),
            ("15", "10"),
            ("15", "12"),
            ("15", "13"),
            ("15", "15"),
            ("15", "16"),
            ("15", "17"),
            ("15", "19"),
            ("15", "2"),
            ("15", "20"),
            ("15", "22"),
            ("15", "23"),
            ("15", "25"),
            ("15", "<s>"),
            ("16", "22"),
            ("17", "19"),
            ("17", "22"),
            ("18", "19"),
            ("18", "2"),
            ("18", "22"),
            ("18", "23"),
            ("19", "0"),
            ("19", "1"),
            ("19", "10"),
            ("19", "11"),
            ("19", "12"),
            ("19", "13"),
            ("19", "14"),
            ("19", "15"),
            ("19", "16"),
            ("19", "17"),
            ("19", "18"),
            ("19", "19"),
            ("19", "2"),
            ("19", "20"),
            ("19", "21"),
            ("19", "22"),
            ("19", "23"),
            ("19", "25"),
            ("19", "3"),
            ("19", "</s>"),
            ("19", "<s>"),
            ("2", "1"),
            ("2", "12"),
            ("2", "15"),
            ("2", "16"),
            ("2", "19"),
            ("2", "2"),
            ("2", "20"),
            ("2", "22"),
            ("2", "23"),
            ("20", "16"),
            ("21", "0"),
            ("21", "1"),
            ("21", "11"),
            ("21", "13"),
            ("21", "16"),
            ("21", "18"),
            ("21", "19"),
            ("21", "2"),
            ("21", "20"),
            ("21", "23"),
            ("21", "25"),
            ("22", "15"),
            ("22", "16"),
            ("22", "19"),
            ("23", "1"),
            ("23", "15"),
            ("23", "19"),
            ("23", "22"),
            ("23", "23"),
            ("25", "1"),
            ("25", "19"),
            ("25", "22"),
            ("25", "23"),
            ("26", "0"),
            ("26", "1"),
            ("26", "10"),
            ("26", "11"),
            ("26", "12"),
            ("26", "13"),
            ("26", "15"),
            ("26", "16"),
            ("26", "17"),
            ("26", "18"),
            ("26", "19"),
            ("26", "2"),
            ("26", "20"),
            ("26", "22"),
            ("26", "23"),
            ("26", "25"),
            ("</s>", "0"),
            ("</s>", "1"),
            ("</s>", "10"),
            ("</s>", "11"),
            ("</s>", "12"),
            ("</s>", "13"),
            ("</s>", "14"),
            ("</s>", "15"),
            ("</s>", "16"),
            ("</s>", "17"),
            ("</s>", "18"),
            ("</s>", "19"),
            ("</s>", "2"),
            ("</s>", "20"),
            ("</s>", "22"),
            ("</s>", "23"),
            ("</s>", "25"),
            ("<s>", "1"),
            ("<s>", "12"),
            ("<s>", "15"),
            ("<s>", "16"),
            ("<s>", "17"),
            ("<s>", "19"),
            ("<s>", "2"),
            ("<s>", "20"),
            ("<s>", "22"),
            ("<s>", "23"),
            ("<s>", "25"),
        }:
            return 25
        elif key in {
            ("0", "14"),
            ("0", "18"),
            ("1", "0"),
            ("1", "10"),
            ("1", "11"),
            ("1", "13"),
            ("1", "14"),
            ("1", "16"),
            ("1", "17"),
            ("1", "18"),
            ("1", "2"),
            ("1", "20"),
            ("10", "0"),
            ("10", "11"),
            ("10", "14"),
            ("10", "18"),
            ("11", "0"),
            ("11", "1"),
            ("11", "10"),
            ("11", "11"),
            ("11", "13"),
            ("11", "14"),
            ("11", "15"),
            ("11", "16"),
            ("11", "17"),
            ("11", "18"),
            ("11", "2"),
            ("13", "18"),
            ("15", "11"),
            ("15", "14"),
            ("15", "18"),
            ("16", "0"),
            ("16", "1"),
            ("16", "10"),
            ("16", "11"),
            ("16", "12"),
            ("16", "13"),
            ("16", "14"),
            ("16", "15"),
            ("16", "16"),
            ("16", "17"),
            ("16", "18"),
            ("16", "19"),
            ("16", "2"),
            ("16", "20"),
            ("16", "23"),
            ("16", "24"),
            ("16", "25"),
            ("16", "5"),
            ("16", "</s>"),
            ("16", "<s>"),
            ("17", "0"),
            ("17", "1"),
            ("17", "10"),
            ("17", "11"),
            ("17", "13"),
            ("17", "14"),
            ("17", "15"),
            ("17", "16"),
            ("17", "17"),
            ("17", "18"),
            ("17", "2"),
            ("17", "20"),
            ("17", "23"),
            ("18", "11"),
            ("18", "13"),
            ("18", "14"),
            ("18", "15"),
            ("18", "16"),
            ("18", "17"),
            ("18", "18"),
            ("2", "0"),
            ("2", "10"),
            ("2", "11"),
            ("2", "13"),
            ("2", "14"),
            ("2", "18"),
            ("23", "11"),
            ("23", "13"),
            ("23", "14"),
            ("23", "16"),
            ("23", "18"),
            ("23", "2"),
            ("25", "0"),
            ("25", "11"),
            ("25", "13"),
            ("25", "14"),
            ("25", "15"),
            ("25", "16"),
            ("25", "18"),
            ("25", "2"),
            ("25", "20"),
            ("<s>", "0"),
            ("<s>", "10"),
            ("<s>", "11"),
            ("<s>", "13"),
            ("<s>", "14"),
            ("<s>", "18"),
        }:
            return 22
        elif key in {
            ("0", "0"),
            ("0", "10"),
            ("0", "11"),
            ("1", "12"),
            ("1", "</s>"),
            ("1", "<s>"),
            ("11", "12"),
            ("11", "20"),
            ("11", "25"),
            ("12", "0"),
            ("12", "10"),
            ("12", "11"),
            ("12", "14"),
            ("12", "18"),
            ("12", "20"),
            ("13", "0"),
            ("13", "10"),
            ("13", "11"),
            ("13", "20"),
            ("17", "3"),
            ("17", "6"),
            ("17", "</s>"),
            ("17", "<s>"),
            ("18", "0"),
            ("18", "1"),
            ("18", "10"),
            ("18", "12"),
            ("18", "20"),
            ("18", "25"),
            ("18", "<s>"),
            ("22", "0"),
            ("22", "1"),
            ("22", "10"),
            ("22", "11"),
            ("22", "12"),
            ("22", "13"),
            ("22", "14"),
            ("22", "18"),
            ("22", "20"),
            ("23", "0"),
            ("23", "10"),
            ("23", "12"),
            ("23", "20"),
            ("23", "25"),
            ("3", "0"),
            ("3", "1"),
            ("3", "10"),
            ("3", "11"),
            ("3", "13"),
            ("3", "14"),
            ("3", "16"),
            ("3", "18"),
            ("4", "0"),
            ("4", "1"),
            ("4", "10"),
            ("4", "11"),
            ("4", "12"),
            ("4", "13"),
            ("4", "14"),
            ("4", "15"),
            ("4", "16"),
            ("4", "18"),
            ("4", "19"),
            ("4", "2"),
            ("4", "20"),
            ("4", "23"),
            ("4", "25"),
            ("6", "18"),
        }:
            return 27
        elif key in {
            ("1", "25"),
            ("13", "14"),
            ("14", "0"),
            ("14", "1"),
            ("14", "10"),
            ("14", "11"),
            ("14", "12"),
            ("14", "13"),
            ("14", "14"),
            ("14", "15"),
            ("14", "16"),
            ("14", "17"),
            ("14", "18"),
            ("14", "19"),
            ("14", "2"),
            ("14", "20"),
            ("14", "21"),
            ("14", "22"),
            ("14", "23"),
            ("14", "25"),
            ("14", "27"),
            ("14", "3"),
            ("14", "4"),
            ("14", "5"),
            ("14", "6"),
            ("14", "9"),
            ("14", "</s>"),
            ("14", "<s>"),
            ("16", "21"),
            ("16", "27"),
            ("16", "3"),
            ("16", "6"),
            ("16", "7"),
            ("16", "9"),
            ("17", "12"),
            ("17", "21"),
            ("17", "25"),
            ("21", "14"),
            ("25", "10"),
            ("25", "12"),
            ("25", "21"),
            ("26", "14"),
            ("9", "0"),
            ("9", "14"),
            ("9", "18"),
        }:
            return 21
        return 0

    mlp_1_0_outputs = [mlp_1_0(k0, k1) for k0, k1 in zip(attn_1_1_outputs, tokens)]
    mlp_1_0_output_scores = classifier_weights.loc[
        [("mlp_1_0_outputs", str(v)) for v in mlp_1_0_outputs]
    ]

    # mlp_1_1 #####################################################
    def mlp_1_1(position, attn_1_1_output):
        key = (position, attn_1_1_output)
        if key in {
            (0, "12"),
            (0, "13"),
            (0, "15"),
            (0, "16"),
            (0, "17"),
            (0, "18"),
            (0, "19"),
            (0, "2"),
            (0, "20"),
            (0, "21"),
            (0, "22"),
            (0, "23"),
            (0, "24"),
            (0, "25"),
            (0, "26"),
            (0, "27"),
            (0, "28"),
            (0, "4"),
            (0, "5"),
            (0, "6"),
            (0, "8"),
            (0, "9"),
            (0, "</s>"),
            (0, "<s>"),
            (2, "15"),
            (2, "</s>"),
            (4, "1"),
            (4, "11"),
            (4, "12"),
            (4, "13"),
            (4, "15"),
            (4, "16"),
            (4, "17"),
            (4, "18"),
            (4, "19"),
            (4, "2"),
            (4, "20"),
            (4, "21"),
            (4, "22"),
            (4, "23"),
            (4, "24"),
            (4, "25"),
            (4, "26"),
            (4, "27"),
            (4, "28"),
            (4, "4"),
            (4, "5"),
            (4, "6"),
            (4, "7"),
            (4, "8"),
            (4, "9"),
            (4, "</s>"),
            (4, "<s>"),
            (5, "0"),
            (5, "1"),
            (5, "10"),
            (5, "11"),
            (5, "12"),
            (5, "13"),
            (5, "14"),
            (5, "15"),
            (5, "16"),
            (5, "17"),
            (5, "18"),
            (5, "19"),
            (5, "2"),
            (5, "20"),
            (5, "21"),
            (5, "22"),
            (5, "23"),
            (5, "24"),
            (5, "25"),
            (5, "26"),
            (5, "27"),
            (5, "28"),
            (5, "3"),
            (5, "4"),
            (5, "5"),
            (5, "6"),
            (5, "7"),
            (5, "8"),
            (5, "9"),
            (5, "</s>"),
            (5, "<s>"),
            (6, "1"),
            (6, "10"),
            (6, "12"),
            (6, "13"),
            (6, "14"),
            (6, "15"),
            (6, "16"),
            (6, "17"),
            (6, "18"),
            (6, "19"),
            (6, "2"),
            (6, "20"),
            (6, "21"),
            (6, "22"),
            (6, "24"),
            (6, "25"),
            (6, "26"),
            (6, "27"),
            (6, "28"),
            (6, "3"),
            (6, "4"),
            (6, "5"),
            (6, "</s>"),
            (6, "<s>"),
            (7, "15"),
            (8, "15"),
            (8, "16"),
            (8, "17"),
            (8, "18"),
            (8, "19"),
            (8, "2"),
            (8, "20"),
            (8, "21"),
            (8, "22"),
            (8, "23"),
            (8, "24"),
            (8, "25"),
            (8, "26"),
            (8, "27"),
            (8, "28"),
            (8, "3"),
            (8, "4"),
            (8, "5"),
            (8, "7"),
            (8, "8"),
            (8, "</s>"),
            (8, "<s>"),
            (9, "15"),
            (9, "<s>"),
            (10, "1"),
            (10, "15"),
            (10, "16"),
            (10, "17"),
            (10, "18"),
            (10, "19"),
            (10, "2"),
            (10, "20"),
            (10, "22"),
            (10, "23"),
            (10, "24"),
            (10, "25"),
            (10, "26"),
            (10, "28"),
            (10, "5"),
            (10, "8"),
            (10, "</s>"),
            (10, "<s>"),
            (11, "15"),
            (11, "18"),
            (11, "19"),
            (11, "2"),
            (11, "23"),
            (11, "<s>"),
            (12, "15"),
            (12, "17"),
            (12, "18"),
            (12, "19"),
            (12, "2"),
            (12, "20"),
            (12, "22"),
            (12, "25"),
            (12, "26"),
            (12, "</s>"),
            (12, "<s>"),
            (13, "15"),
            (13, "17"),
            (13, "</s>"),
            (13, "<s>"),
            (14, "15"),
            (14, "18"),
            (15, "15"),
            (16, "15"),
            (16, "16"),
            (16, "17"),
            (16, "18"),
            (16, "19"),
            (16, "27"),
            (16, "8"),
            (16, "<s>"),
            (17, "15"),
            (17, "16"),
            (17, "17"),
            (17, "</s>"),
            (17, "<s>"),
            (18, "15"),
            (18, "16"),
            (18, "17"),
            (18, "18"),
            (18, "19"),
            (18, "2"),
            (18, "<s>"),
            (19, "15"),
            (20, "15"),
            (21, "15"),
            (22, "15"),
            (23, "15"),
            (24, "15"),
            (24, "16"),
            (24, "2"),
            (24, "20"),
            (24, "23"),
            (24, "5"),
            (24, "8"),
            (25, "15"),
            (25, "2"),
            (26, "15"),
            (27, "15"),
            (28, "15"),
            (28, "17"),
            (29, "15"),
            (30, "15"),
            (31, "15"),
        }:
            return 13
        elif key in {
            (1, "20"),
            (2, "16"),
            (2, "17"),
            (2, "18"),
            (2, "19"),
            (2, "2"),
            (2, "20"),
            (2, "21"),
            (2, "22"),
            (2, "23"),
            (2, "24"),
            (2, "25"),
            (2, "26"),
            (2, "27"),
            (2, "28"),
            (2, "3"),
            (2, "4"),
            (2, "5"),
            (2, "6"),
            (2, "7"),
            (2, "8"),
            (2, "9"),
            (2, "<s>"),
            (7, "20"),
            (7, "21"),
            (7, "28"),
            (7, "4"),
            (7, "5"),
            (7, "6"),
            (8, "6"),
            (9, "21"),
            (10, "21"),
            (10, "4"),
            (10, "6"),
            (11, "21"),
            (11, "5"),
            (12, "21"),
            (12, "23"),
            (12, "5"),
            (13, "2"),
            (13, "20"),
            (13, "21"),
            (13, "22"),
            (13, "23"),
            (13, "24"),
            (13, "25"),
            (13, "26"),
            (13, "28"),
            (13, "3"),
            (13, "4"),
            (13, "5"),
            (13, "6"),
            (13, "8"),
            (14, "21"),
            (14, "5"),
            (14, "6"),
            (15, "21"),
            (15, "5"),
            (15, "6"),
            (16, "21"),
            (16, "4"),
            (16, "5"),
            (16, "6"),
            (17, "18"),
            (17, "2"),
            (17, "20"),
            (17, "21"),
            (17, "22"),
            (17, "24"),
            (17, "25"),
            (17, "26"),
            (17, "28"),
            (17, "3"),
            (17, "4"),
            (17, "5"),
            (17, "6"),
            (17, "7"),
            (17, "8"),
            (18, "20"),
            (18, "21"),
            (18, "23"),
            (18, "4"),
            (18, "5"),
            (18, "6"),
            (19, "21"),
            (19, "5"),
            (20, "21"),
            (21, "21"),
            (21, "5"),
            (22, "21"),
            (22, "5"),
            (22, "6"),
            (23, "21"),
            (23, "4"),
            (23, "5"),
            (24, "21"),
            (25, "21"),
            (25, "4"),
            (25, "5"),
            (26, "21"),
            (26, "5"),
            (27, "21"),
            (27, "6"),
            (28, "20"),
            (28, "21"),
            (28, "4"),
            (28, "5"),
            (28, "6"),
            (29, "21"),
            (30, "21"),
            (31, "21"),
            (31, "4"),
            (31, "5"),
        }:
            return 1
        elif key in {
            (1, "1"),
            (1, "10"),
            (1, "11"),
            (1, "12"),
            (1, "13"),
            (1, "16"),
            (1, "17"),
            (1, "18"),
            (1, "19"),
            (1, "2"),
            (1, "21"),
            (1, "22"),
            (1, "23"),
            (1, "24"),
            (1, "25"),
            (1, "26"),
            (1, "27"),
            (1, "28"),
            (1, "3"),
            (1, "4"),
            (1, "5"),
            (1, "6"),
            (1, "7"),
            (1, "8"),
            (1, "9"),
            (1, "</s>"),
            (1, "<s>"),
            (7, "17"),
            (7, "18"),
            (7, "19"),
            (7, "27"),
            (9, "18"),
            (9, "19"),
            (9, "6"),
            (10, "27"),
            (11, "6"),
            (12, "1"),
            (12, "11"),
            (12, "16"),
            (12, "27"),
            (12, "4"),
            (12, "6"),
            (13, "11"),
            (13, "16"),
            (13, "18"),
            (13, "19"),
            (13, "27"),
            (17, "19"),
            (17, "27"),
            (19, "19"),
            (19, "27"),
            (19, "6"),
            (20, "27"),
            (20, "6"),
            (21, "6"),
            (23, "18"),
            (23, "19"),
            (23, "27"),
            (23, "6"),
            (24, "27"),
            (24, "4"),
            (24, "6"),
            (25, "19"),
            (25, "27"),
            (25, "6"),
            (26, "18"),
            (26, "19"),
            (26, "27"),
            (26, "6"),
            (28, "19"),
            (28, "27"),
            (29, "6"),
            (30, "6"),
            (31, "19"),
            (31, "27"),
            (31, "6"),
        }:
            return 9
        elif key in {
            (7, "23"),
            (14, "23"),
            (15, "23"),
            (16, "23"),
            (17, "23"),
            (22, "23"),
            (23, "23"),
            (25, "23"),
            (26, "23"),
            (27, "23"),
            (28, "23"),
            (31, "23"),
        }:
            return 18
        elif key in {(0, "11"), (6, "11"), (6, "23"), (6, "6"), (6, "8"), (6, "9")}:
            return 12
        elif key in {(0, "3"), (0, "7"), (4, "3")}:
            return 4
        elif key in {(6, "7")}:
            return 28
        elif key in {(1, "15"), (8, "13")}:
            return 16
        elif key in {(0, "1")}:
            return 30
        return 3

    mlp_1_1_outputs = [mlp_1_1(k0, k1) for k0, k1 in zip(positions, attn_1_1_outputs)]
    mlp_1_1_output_scores = classifier_weights.loc[
        [("mlp_1_1_outputs", str(v)) for v in mlp_1_1_outputs]
    ]

    # attn_2_0 ####################################################
    def predicate_2_0(q_position, k_position):
        if q_position in {0, 25, 14}:
            return k_position == 19
        elif q_position in {1, 2}:
            return k_position == 4
        elif q_position in {3, 4}:
            return k_position == 1
        elif q_position in {5, 6}:
            return k_position == 2
        elif q_position in {7, 8, 12, 15, 16, 18, 21, 22, 28, 31}:
            return k_position == 20
        elif q_position in {9}:
            return k_position == 15
        elif q_position in {27, 10, 19, 23}:
            return k_position == 9
        elif q_position in {17, 11, 29, 30}:
            return k_position == 21
        elif q_position in {13}:
            return k_position == 14
        elif q_position in {20}:
            return k_position == 11
        elif q_position in {24}:
            return k_position == 23
        elif q_position in {26}:
            return k_position == 17

    attn_2_0_pattern = select_closest(positions, positions, predicate_2_0)
    attn_2_0_outputs = aggregate(attn_2_0_pattern, attn_0_1_outputs)
    attn_2_0_output_scores = classifier_weights.loc[
        [("attn_2_0_outputs", str(v)) for v in attn_2_0_outputs]
    ]

    # attn_2_1 ####################################################
    def predicate_2_1(q_position, k_position):
        if q_position in {0, 17, 28, 14}:
            return k_position == 19
        elif q_position in {1, 6}:
            return k_position == 2
        elif q_position in {2, 5}:
            return k_position == 3
        elif q_position in {3, 4}:
            return k_position == 0
        elif q_position in {7}:
            return k_position == 11
        elif q_position in {8, 18, 13}:
            return k_position == 14
        elif q_position in {9, 26, 20, 31}:
            return k_position == 17
        elif q_position in {10, 22, 15}:
            return k_position == 20
        elif q_position in {24, 11, 12}:
            return k_position == 15
        elif q_position in {16, 21, 30}:
            return k_position == 23
        elif q_position in {19, 29}:
            return k_position == 8
        elif q_position in {23}:
            return k_position == 9
        elif q_position in {25, 27}:
            return k_position == 21

    attn_2_1_pattern = select_closest(positions, positions, predicate_2_1)
    attn_2_1_outputs = aggregate(attn_2_1_pattern, attn_1_0_outputs)
    attn_2_1_output_scores = classifier_weights.loc[
        [("attn_2_1_outputs", str(v)) for v in attn_2_1_outputs]
    ]

    # mlp_2_0 #####################################################
    def mlp_2_0(attn_2_0_output, attn_2_1_output):
        key = (attn_2_0_output, attn_2_1_output)
        if key in {
            ("12", "10"),
            ("12", "12"),
            ("12", "13"),
            ("12", "15"),
            ("12", "16"),
            ("12", "17"),
            ("12", "19"),
            ("12", "20"),
            ("12", "22"),
            ("12", "23"),
            ("12", "25"),
            ("12", "26"),
            ("12", "27"),
            ("12", "3"),
            ("12", "6"),
            ("12", "7"),
            ("12", "8"),
            ("12", "9"),
            ("12", "</s>"),
            ("12", "<s>"),
            ("13", "13"),
            ("13", "19"),
            ("13", "21"),
            ("13", "3"),
            ("13", "8"),
            ("14", "8"),
            ("15", "19"),
            ("16", "12"),
            ("16", "13"),
            ("16", "15"),
            ("16", "16"),
            ("16", "19"),
            ("16", "21"),
            ("16", "26"),
            ("16", "27"),
            ("16", "3"),
            ("16", "6"),
            ("16", "7"),
            ("16", "8"),
            ("16", "9"),
            ("16", "</s>"),
            ("17", "21"),
            ("18", "10"),
            ("18", "12"),
            ("18", "13"),
            ("18", "21"),
            ("18", "8"),
            ("19", "10"),
            ("19", "12"),
            ("19", "13"),
            ("19", "19"),
            ("19", "21"),
            ("19", "27"),
            ("19", "3"),
            ("19", "6"),
            ("19", "8"),
            ("19", "</s>"),
            ("20", "12"),
            ("20", "13"),
            ("20", "21"),
            ("20", "27"),
            ("20", "8"),
            ("21", "10"),
            ("21", "12"),
            ("21", "13"),
            ("21", "16"),
            ("21", "19"),
            ("21", "20"),
            ("21", "21"),
            ("21", "22"),
            ("21", "24"),
            ("21", "25"),
            ("21", "26"),
            ("21", "27"),
            ("21", "3"),
            ("21", "6"),
            ("21", "8"),
            ("21", "</s>"),
            ("22", "10"),
            ("22", "12"),
            ("22", "13"),
            ("22", "16"),
            ("22", "19"),
            ("22", "21"),
            ("22", "22"),
            ("22", "26"),
            ("22", "27"),
            ("22", "3"),
            ("22", "6"),
            ("22", "8"),
            ("22", "9"),
            ("22", "</s>"),
            ("23", "10"),
            ("23", "12"),
            ("23", "13"),
            ("23", "19"),
            ("23", "21"),
            ("23", "27"),
            ("23", "28"),
            ("23", "8"),
            ("24", "10"),
            ("24", "12"),
            ("24", "13"),
            ("24", "21"),
            ("24", "27"),
            ("24", "8"),
            ("25", "10"),
            ("25", "12"),
            ("25", "13"),
            ("25", "21"),
            ("25", "8"),
            ("26", "10"),
            ("26", "12"),
            ("26", "13"),
            ("26", "19"),
            ("26", "21"),
            ("26", "22"),
            ("26", "27"),
            ("26", "3"),
            ("26", "6"),
            ("26", "8"),
            ("26", "</s>"),
            ("27", "10"),
            ("27", "12"),
            ("27", "13"),
            ("27", "15"),
            ("27", "16"),
            ("27", "17"),
            ("27", "19"),
            ("27", "21"),
            ("27", "22"),
            ("27", "25"),
            ("27", "26"),
            ("27", "27"),
            ("27", "3"),
            ("27", "6"),
            ("27", "7"),
            ("27", "8"),
            ("27", "9"),
            ("27", "</s>"),
            ("28", "12"),
            ("28", "13"),
            ("28", "21"),
            ("28", "27"),
            ("28", "8"),
            ("3", "10"),
            ("3", "12"),
            ("3", "13"),
            ("3", "21"),
            ("3", "27"),
            ("3", "8"),
            ("4", "13"),
            ("4", "21"),
            ("5", "10"),
            ("5", "12"),
            ("5", "13"),
            ("5", "19"),
            ("5", "21"),
            ("5", "22"),
            ("5", "27"),
            ("5", "3"),
            ("5", "6"),
            ("5", "8"),
            ("5", "9"),
            ("5", "</s>"),
            ("6", "10"),
            ("6", "12"),
            ("6", "13"),
            ("6", "15"),
            ("6", "16"),
            ("6", "19"),
            ("6", "21"),
            ("6", "22"),
            ("6", "25"),
            ("6", "26"),
            ("6", "27"),
            ("6", "3"),
            ("6", "6"),
            ("6", "8"),
            ("6", "9"),
            ("6", "</s>"),
            ("7", "10"),
            ("7", "12"),
            ("7", "13"),
            ("7", "21"),
            ("7", "27"),
            ("7", "8"),
            ("8", "10"),
            ("8", "12"),
            ("8", "13"),
            ("8", "19"),
            ("8", "21"),
            ("8", "27"),
            ("8", "8"),
            ("9", "10"),
            ("9", "12"),
            ("9", "13"),
            ("9", "21"),
            ("9", "8"),
            ("</s>", "10"),
            ("</s>", "12"),
            ("</s>", "13"),
            ("</s>", "19"),
            ("</s>", "21"),
            ("</s>", "22"),
            ("</s>", "25"),
            ("</s>", "27"),
            ("</s>", "3"),
            ("</s>", "6"),
            ("</s>", "8"),
            ("</s>", "9"),
            ("</s>", "</s>"),
            ("<s>", "10"),
            ("<s>", "12"),
            ("<s>", "13"),
            ("<s>", "21"),
            ("<s>", "8"),
        }:
            return 22
        elif key in {
            ("1", "1"),
            ("1", "10"),
            ("1", "11"),
            ("1", "12"),
            ("1", "15"),
            ("1", "16"),
            ("1", "18"),
            ("1", "19"),
            ("1", "2"),
            ("1", "20"),
            ("1", "22"),
            ("1", "23"),
            ("1", "24"),
            ("1", "25"),
            ("1", "26"),
            ("1", "27"),
            ("1", "28"),
            ("1", "3"),
            ("1", "4"),
            ("1", "5"),
            ("1", "6"),
            ("1", "7"),
            ("1", "8"),
            ("1", "9"),
            ("1", "</s>"),
            ("1", "<s>"),
            ("10", "1"),
            ("10", "10"),
            ("10", "11"),
            ("10", "12"),
            ("10", "15"),
            ("10", "16"),
            ("10", "18"),
            ("10", "19"),
            ("10", "2"),
            ("10", "22"),
            ("10", "23"),
            ("10", "24"),
            ("10", "25"),
            ("10", "26"),
            ("10", "27"),
            ("10", "28"),
            ("10", "3"),
            ("10", "4"),
            ("10", "5"),
            ("10", "6"),
            ("10", "7"),
            ("10", "8"),
            ("10", "9"),
            ("10", "</s>"),
            ("10", "<s>"),
            ("11", "1"),
            ("11", "10"),
            ("11", "12"),
            ("11", "28"),
            ("11", "8"),
            ("12", "1"),
            ("12", "11"),
            ("12", "24"),
            ("12", "28"),
            ("15", "1"),
            ("15", "10"),
            ("15", "12"),
            ("15", "15"),
            ("15", "16"),
            ("15", "22"),
            ("15", "25"),
            ("15", "26"),
            ("15", "27"),
            ("15", "28"),
            ("15", "3"),
            ("15", "6"),
            ("15", "8"),
            ("15", "</s>"),
            ("16", "1"),
            ("16", "10"),
            ("16", "22"),
            ("16", "23"),
            ("16", "24"),
            ("16", "25"),
            ("16", "28"),
            ("18", "1"),
            ("18", "28"),
            ("19", "1"),
            ("19", "28"),
            ("2", "1"),
            ("2", "28"),
            ("20", "1"),
            ("20", "10"),
            ("20", "28"),
            ("22", "1"),
            ("22", "28"),
            ("23", "1"),
            ("24", "1"),
            ("24", "28"),
            ("25", "1"),
            ("25", "28"),
            ("26", "1"),
            ("26", "28"),
            ("27", "1"),
            ("27", "28"),
            ("28", "1"),
            ("28", "10"),
            ("28", "28"),
            ("3", "1"),
            ("3", "28"),
            ("4", "1"),
            ("4", "28"),
            ("5", "1"),
            ("5", "28"),
            ("6", "1"),
            ("6", "28"),
            ("7", "1"),
            ("7", "28"),
            ("8", "1"),
            ("8", "28"),
            ("9", "1"),
            ("9", "28"),
            ("</s>", "1"),
            ("</s>", "28"),
            ("<s>", "1"),
            ("<s>", "28"),
        }:
            return 31
        elif key in {
            ("0", "0"),
            ("0", "1"),
            ("0", "10"),
            ("0", "11"),
            ("0", "12"),
            ("0", "13"),
            ("0", "14"),
            ("0", "15"),
            ("0", "16"),
            ("0", "17"),
            ("0", "18"),
            ("0", "19"),
            ("0", "2"),
            ("0", "20"),
            ("0", "21"),
            ("0", "22"),
            ("0", "23"),
            ("0", "24"),
            ("0", "25"),
            ("0", "26"),
            ("0", "27"),
            ("0", "28"),
            ("0", "3"),
            ("0", "4"),
            ("0", "5"),
            ("0", "6"),
            ("0", "7"),
            ("0", "8"),
            ("0", "9"),
            ("0", "</s>"),
            ("0", "<s>"),
            ("1", "0"),
            ("1", "13"),
            ("1", "14"),
            ("1", "17"),
            ("1", "21"),
            ("10", "0"),
            ("10", "13"),
            ("10", "14"),
            ("10", "17"),
            ("10", "21"),
            ("11", "0"),
            ("12", "0"),
            ("13", "0"),
            ("13", "1"),
            ("13", "10"),
            ("13", "22"),
            ("13", "25"),
            ("13", "27"),
            ("13", "28"),
            ("13", "6"),
            ("13", "</s>"),
            ("14", "0"),
            ("14", "1"),
            ("14", "10"),
            ("14", "2"),
            ("14", "22"),
            ("14", "24"),
            ("14", "25"),
            ("14", "27"),
            ("14", "28"),
            ("14", "6"),
            ("15", "0"),
            ("15", "13"),
            ("15", "14"),
            ("15", "21"),
            ("16", "0"),
            ("17", "0"),
            ("17", "1"),
            ("17", "10"),
            ("17", "22"),
            ("17", "25"),
            ("17", "28"),
            ("17", "6"),
            ("18", "0"),
            ("19", "0"),
            ("20", "0"),
            ("21", "0"),
            ("21", "1"),
            ("21", "28"),
            ("22", "0"),
            ("23", "0"),
            ("24", "0"),
            ("25", "0"),
            ("26", "0"),
            ("27", "0"),
            ("28", "0"),
            ("3", "0"),
            ("4", "0"),
            ("5", "0"),
            ("6", "0"),
            ("7", "0"),
            ("8", "0"),
            ("9", "0"),
            ("</s>", "0"),
            ("<s>", "0"),
        }:
            return 15
        elif key in {
            ("11", "14"),
            ("11", "21"),
            ("12", "14"),
            ("12", "21"),
            ("13", "12"),
            ("13", "14"),
            ("14", "12"),
            ("14", "13"),
            ("14", "14"),
            ("14", "15"),
            ("14", "16"),
            ("14", "17"),
            ("14", "18"),
            ("14", "19"),
            ("14", "20"),
            ("14", "21"),
            ("14", "23"),
            ("14", "26"),
            ("14", "3"),
            ("14", "5"),
            ("14", "7"),
            ("14", "</s>"),
            ("14", "<s>"),
            ("16", "14"),
            ("17", "12"),
            ("17", "14"),
            ("18", "14"),
            ("19", "14"),
            ("2", "14"),
            ("20", "14"),
            ("21", "14"),
            ("22", "14"),
            ("23", "14"),
            ("24", "14"),
            ("25", "14"),
            ("26", "14"),
            ("27", "14"),
            ("28", "14"),
            ("3", "14"),
            ("4", "14"),
            ("5", "14"),
            ("6", "14"),
            ("7", "14"),
            ("8", "14"),
            ("9", "14"),
            ("</s>", "14"),
            ("<s>", "14"),
        }:
            return 8
        elif key in {
            ("13", "17"),
            ("13", "18"),
            ("13", "23"),
            ("13", "26"),
            ("13", "4"),
            ("13", "7"),
            ("13", "9"),
            ("14", "9"),
            ("15", "17"),
            ("16", "17"),
            ("17", "13"),
            ("17", "17"),
            ("17", "26"),
            ("17", "27"),
            ("17", "3"),
            ("17", "8"),
            ("17", "9"),
            ("17", "</s>"),
            ("18", "17"),
            ("2", "13"),
            ("2", "17"),
            ("2", "21"),
            ("2", "3"),
            ("2", "9"),
            ("21", "15"),
            ("21", "17"),
            ("21", "18"),
            ("21", "4"),
            ("21", "5"),
            ("21", "7"),
            ("21", "9"),
            ("21", "<s>"),
            ("22", "17"),
            ("23", "17"),
            ("25", "17"),
            ("26", "17"),
            ("28", "17"),
            ("3", "17"),
            ("5", "17"),
            ("6", "17"),
            ("8", "17"),
            ("9", "17"),
            ("9", "9"),
            ("</s>", "17"),
        }:
            return 7
        elif key in {
            ("13", "11"),
            ("13", "15"),
            ("13", "16"),
            ("13", "2"),
            ("13", "24"),
            ("13", "5"),
            ("13", "<s>"),
            ("2", "0"),
        }:
            return 0
        elif key in {("11", "13")}:
            return 11
        return 28

    mlp_2_0_outputs = [
        mlp_2_0(k0, k1) for k0, k1 in zip(attn_2_0_outputs, attn_2_1_outputs)
    ]
    mlp_2_0_output_scores = classifier_weights.loc[
        [("mlp_2_0_outputs", str(v)) for v in mlp_2_0_outputs]
    ]

    # mlp_2_1 #####################################################
    def mlp_2_1(position, attn_2_1_output):
        key = (position, attn_2_1_output)
        if key in {
            (0, "15"),
            (0, "23"),
            (2, "15"),
            (2, "20"),
            (2, "21"),
            (2, "22"),
            (2, "23"),
            (2, "28"),
            (3, "15"),
            (3, "20"),
            (3, "22"),
            (3, "23"),
            (3, "28"),
            (4, "15"),
            (4, "20"),
            (4, "22"),
            (4, "23"),
            (4, "28"),
            (6, "15"),
            (7, "20"),
            (7, "22"),
            (7, "23"),
            (7, "28"),
            (8, "15"),
            (8, "20"),
            (8, "22"),
            (8, "23"),
            (8, "28"),
            (9, "22"),
            (9, "28"),
            (10, "15"),
            (10, "20"),
            (10, "22"),
            (10, "23"),
            (10, "28"),
            (11, "19"),
            (11, "2"),
            (11, "20"),
            (11, "22"),
            (11, "23"),
            (11, "28"),
            (12, "15"),
            (12, "20"),
            (12, "21"),
            (12, "22"),
            (12, "23"),
            (12, "28"),
            (13, "15"),
            (13, "20"),
            (13, "21"),
            (13, "22"),
            (13, "23"),
            (13, "28"),
            (14, "15"),
            (14, "20"),
            (14, "22"),
            (14, "23"),
            (14, "28"),
            (15, "15"),
            (15, "20"),
            (15, "22"),
            (15, "23"),
            (15, "28"),
            (16, "15"),
            (16, "20"),
            (16, "21"),
            (16, "22"),
            (16, "23"),
            (16, "28"),
            (17, "15"),
            (17, "20"),
            (17, "21"),
            (17, "22"),
            (17, "23"),
            (17, "28"),
            (18, "15"),
            (18, "20"),
            (18, "22"),
            (18, "23"),
            (18, "28"),
            (19, "15"),
            (19, "20"),
            (19, "21"),
            (19, "22"),
            (19, "23"),
            (19, "28"),
            (19, "7"),
            (19, "<s>"),
            (20, "15"),
            (20, "20"),
            (20, "21"),
            (20, "22"),
            (20, "23"),
            (20, "28"),
            (21, "15"),
            (21, "20"),
            (21, "21"),
            (21, "22"),
            (21, "23"),
            (21, "28"),
            (22, "15"),
            (22, "20"),
            (22, "22"),
            (22, "23"),
            (22, "28"),
            (23, "15"),
            (23, "20"),
            (23, "22"),
            (23, "23"),
            (23, "28"),
            (24, "15"),
            (24, "20"),
            (24, "22"),
            (24, "23"),
            (24, "28"),
            (25, "15"),
            (25, "20"),
            (25, "22"),
            (25, "23"),
            (25, "28"),
            (26, "15"),
            (26, "20"),
            (26, "21"),
            (26, "22"),
            (26, "23"),
            (26, "28"),
            (27, "15"),
            (27, "20"),
            (27, "22"),
            (27, "23"),
            (27, "28"),
            (28, "15"),
            (28, "20"),
            (28, "21"),
            (28, "22"),
            (28, "23"),
            (28, "28"),
            (29, "15"),
            (29, "20"),
            (29, "22"),
            (29, "23"),
            (29, "28"),
            (30, "15"),
            (30, "20"),
            (30, "22"),
            (30, "23"),
            (31, "15"),
            (31, "20"),
            (31, "22"),
            (31, "23"),
            (31, "28"),
        }:
            return 20
        elif key in {
            (1, "0"),
            (1, "13"),
            (1, "15"),
            (1, "17"),
            (1, "18"),
            (1, "19"),
            (1, "2"),
            (1, "20"),
            (1, "21"),
            (1, "22"),
            (1, "23"),
            (1, "24"),
            (1, "26"),
            (1, "27"),
            (1, "28"),
            (1, "3"),
            (1, "4"),
            (1, "5"),
            (1, "6"),
            (1, "7"),
            (1, "8"),
            (1, "9"),
            (1, "</s>"),
            (1, "<s>"),
            (2, "26"),
            (2, "5"),
            (2, "9"),
            (2, "</s>"),
            (3, "5"),
            (3, "9"),
            (4, "5"),
            (7, "5"),
            (7, "9"),
            (8, "5"),
            (8, "9"),
            (9, "18"),
            (9, "26"),
            (9, "5"),
            (9, "9"),
            (10, "26"),
            (10, "5"),
            (10, "9"),
            (11, "13"),
            (11, "15"),
            (11, "4"),
            (11, "5"),
            (11, "7"),
            (11, "8"),
            (11, "9"),
            (11, "</s>"),
            (12, "18"),
            (12, "26"),
            (12, "5"),
            (12, "9"),
            (12, "</s>"),
            (13, "5"),
            (13, "9"),
            (13, "</s>"),
            (14, "26"),
            (14, "5"),
            (14, "9"),
            (15, "26"),
            (15, "5"),
            (15, "9"),
            (16, "4"),
            (16, "5"),
            (16, "7"),
            (16, "8"),
            (16, "9"),
            (17, "18"),
            (17, "26"),
            (17, "5"),
            (17, "7"),
            (17, "9"),
            (17, "</s>"),
            (18, "26"),
            (18, "5"),
            (18, "7"),
            (18, "9"),
            (18, "</s>"),
            (19, "13"),
            (19, "5"),
            (19, "9"),
            (19, "</s>"),
            (20, "13"),
            (20, "14"),
            (20, "5"),
            (20, "7"),
            (20, "9"),
            (20, "</s>"),
            (21, "13"),
            (21, "5"),
            (21, "9"),
            (21, "</s>"),
            (22, "5"),
            (22, "7"),
            (22, "9"),
            (23, "5"),
            (23, "9"),
            (24, "5"),
            (24, "7"),
            (24, "9"),
            (25, "5"),
            (25, "9"),
            (26, "26"),
            (26, "5"),
            (26, "9"),
            (26, "</s>"),
            (27, "5"),
            (27, "9"),
            (28, "5"),
            (28, "7"),
            (28, "9"),
            (28, "</s>"),
            (29, "5"),
            (29, "9"),
            (30, "5"),
            (31, "5"),
            (31, "9"),
        }:
            return 25
        elif key in {
            (0, "0"),
            (0, "14"),
            (0, "17"),
            (0, "19"),
            (0, "2"),
            (0, "20"),
            (0, "21"),
            (0, "22"),
            (0, "26"),
            (0, "27"),
            (0, "28"),
            (0, "3"),
            (0, "4"),
            (0, "6"),
            (0, "7"),
            (0, "8"),
            (0, "9"),
            (0, "</s>"),
            (0, "<s>"),
            (2, "6"),
            (4, "0"),
            (4, "14"),
            (4, "17"),
            (4, "19"),
            (4, "2"),
            (4, "3"),
            (4, "6"),
            (4, "<s>"),
            (5, "6"),
            (5, "8"),
            (5, "9"),
            (6, "19"),
            (6, "2"),
            (6, "23"),
            (6, "26"),
            (6, "27"),
            (6, "28"),
            (6, "3"),
            (6, "4"),
            (6, "5"),
            (6, "6"),
            (6, "7"),
            (6, "8"),
            (6, "9"),
            (7, "6"),
            (8, "6"),
            (9, "6"),
            (10, "6"),
            (11, "6"),
            (12, "6"),
            (13, "6"),
            (14, "6"),
            (15, "6"),
            (16, "6"),
            (17, "6"),
            (18, "6"),
            (19, "2"),
            (19, "3"),
            (19, "6"),
            (20, "2"),
            (20, "3"),
            (20, "6"),
            (21, "2"),
            (21, "3"),
            (21, "6"),
            (21, "<s>"),
            (22, "6"),
            (23, "6"),
            (24, "6"),
            (25, "6"),
            (26, "6"),
            (26, "<s>"),
            (27, "6"),
            (28, "6"),
            (29, "6"),
            (30, "2"),
            (30, "26"),
            (30, "28"),
            (30, "6"),
            (31, "6"),
        }:
            return 5
        elif key in {
            (2, "<s>"),
            (4, "</s>"),
            (5, "0"),
            (5, "1"),
            (5, "10"),
            (5, "11"),
            (5, "12"),
            (5, "13"),
            (5, "14"),
            (5, "15"),
            (5, "16"),
            (5, "17"),
            (5, "18"),
            (5, "19"),
            (5, "2"),
            (5, "20"),
            (5, "21"),
            (5, "22"),
            (5, "23"),
            (5, "24"),
            (5, "26"),
            (5, "27"),
            (5, "28"),
            (5, "3"),
            (5, "5"),
            (5, "</s>"),
            (5, "<s>"),
            (6, "</s>"),
            (6, "<s>"),
            (7, "</s>"),
            (7, "<s>"),
            (8, "</s>"),
            (8, "<s>"),
            (9, "</s>"),
            (9, "<s>"),
            (10, "</s>"),
            (10, "<s>"),
            (11, "21"),
            (11, "24"),
            (11, "<s>"),
            (12, "<s>"),
            (13, "<s>"),
            (14, "</s>"),
            (14, "<s>"),
            (15, "</s>"),
            (15, "<s>"),
            (16, "</s>"),
            (16, "<s>"),
            (17, "<s>"),
            (18, "<s>"),
            (20, "<s>"),
            (22, "</s>"),
            (22, "<s>"),
            (23, "</s>"),
            (23, "<s>"),
            (24, "</s>"),
            (24, "<s>"),
            (25, "</s>"),
            (25, "<s>"),
            (27, "</s>"),
            (27, "<s>"),
            (28, "<s>"),
            (29, "</s>"),
            (29, "<s>"),
            (30, "</s>"),
            (30, "<s>"),
            (31, "</s>"),
            (31, "<s>"),
        }:
            return 2
        elif key in {
            (0, "25"),
            (2, "25"),
            (2, "4"),
            (2, "7"),
            (2, "8"),
            (3, "25"),
            (4, "25"),
            (4, "4"),
            (4, "8"),
            (5, "25"),
            (6, "25"),
            (7, "25"),
            (8, "25"),
            (9, "25"),
            (10, "25"),
            (11, "25"),
            (12, "25"),
            (12, "4"),
            (12, "8"),
            (13, "25"),
            (13, "4"),
            (13, "8"),
            (14, "25"),
            (15, "25"),
            (15, "4"),
            (15, "8"),
            (16, "25"),
            (17, "25"),
            (17, "4"),
            (17, "8"),
            (18, "25"),
            (18, "4"),
            (18, "8"),
            (19, "25"),
            (19, "4"),
            (19, "8"),
            (20, "25"),
            (20, "8"),
            (21, "25"),
            (21, "4"),
            (21, "8"),
            (22, "25"),
            (23, "25"),
            (24, "25"),
            (25, "25"),
            (25, "4"),
            (25, "8"),
            (26, "25"),
            (26, "4"),
            (26, "8"),
            (27, "25"),
            (28, "25"),
            (28, "4"),
            (28, "8"),
            (29, "25"),
            (30, "25"),
            (31, "25"),
        }:
            return 18
        elif key in {
            (0, "11"),
            (0, "24"),
            (2, "24"),
            (3, "24"),
            (4, "11"),
            (4, "21"),
            (4, "24"),
            (6, "0"),
            (6, "11"),
            (6, "12"),
            (6, "20"),
            (6, "21"),
            (6, "22"),
            (6, "24"),
            (7, "24"),
            (8, "21"),
            (8, "24"),
            (9, "21"),
            (9, "24"),
            (10, "21"),
            (10, "24"),
            (12, "24"),
            (13, "24"),
            (14, "21"),
            (14, "24"),
            (15, "21"),
            (15, "24"),
            (16, "24"),
            (17, "24"),
            (18, "21"),
            (18, "24"),
            (19, "24"),
            (20, "24"),
            (21, "24"),
            (22, "21"),
            (22, "24"),
            (23, "21"),
            (23, "24"),
            (24, "21"),
            (24, "24"),
            (25, "21"),
            (25, "24"),
            (26, "24"),
            (27, "21"),
            (27, "24"),
            (28, "24"),
            (29, "21"),
            (29, "24"),
            (30, "11"),
            (30, "21"),
            (30, "24"),
            (31, "21"),
            (31, "24"),
        }:
            return 17
        elif key in {
            (2, "27"),
            (3, "26"),
            (3, "27"),
            (4, "26"),
            (4, "27"),
            (7, "26"),
            (7, "27"),
            (8, "26"),
            (8, "27"),
            (9, "27"),
            (10, "27"),
            (11, "26"),
            (11, "27"),
            (12, "27"),
            (13, "26"),
            (13, "27"),
            (14, "27"),
            (15, "27"),
            (16, "26"),
            (16, "27"),
            (17, "27"),
            (18, "27"),
            (19, "26"),
            (19, "27"),
            (20, "26"),
            (20, "27"),
            (20, "4"),
            (21, "26"),
            (21, "27"),
            (21, "7"),
            (22, "26"),
            (22, "27"),
            (23, "26"),
            (23, "27"),
            (24, "26"),
            (24, "27"),
            (25, "26"),
            (25, "27"),
            (26, "27"),
            (27, "26"),
            (27, "27"),
            (28, "26"),
            (28, "27"),
            (29, "26"),
            (29, "27"),
            (30, "27"),
            (31, "26"),
            (31, "27"),
        }:
            return 10
        elif key in {
            (1, "1"),
            (1, "10"),
            (1, "14"),
            (1, "16"),
            (7, "1"),
            (7, "15"),
            (8, "1"),
            (9, "1"),
            (9, "15"),
            (10, "1"),
            (11, "0"),
            (11, "1"),
            (12, "1"),
            (13, "1"),
            (14, "1"),
            (15, "1"),
            (17, "1"),
            (18, "1"),
            (19, "1"),
            (20, "0"),
            (20, "1"),
            (21, "1"),
            (22, "1"),
            (23, "1"),
            (24, "1"),
            (25, "1"),
            (26, "1"),
            (27, "1"),
            (28, "1"),
            (29, "1"),
            (31, "1"),
        }:
            return 30
        elif key in {
            (0, "18"),
            (0, "5"),
            (2, "18"),
            (3, "18"),
            (4, "18"),
            (4, "9"),
            (6, "18"),
            (7, "18"),
            (8, "18"),
            (10, "18"),
            (11, "17"),
            (11, "18"),
            (13, "18"),
            (14, "18"),
            (15, "18"),
            (16, "18"),
            (18, "18"),
            (19, "18"),
            (20, "18"),
            (21, "18"),
            (22, "18"),
            (23, "18"),
            (24, "18"),
            (25, "18"),
            (26, "18"),
            (27, "18"),
            (28, "18"),
            (29, "18"),
            (30, "18"),
            (31, "18"),
        }:
            return 9
        elif key in {
            (1, "11"),
            (1, "12"),
            (1, "25"),
            (11, "11"),
            (11, "12"),
            (12, "11"),
            (12, "12"),
            (16, "0"),
            (16, "11"),
            (16, "12"),
            (17, "11"),
            (18, "11"),
            (20, "11"),
            (20, "12"),
            (22, "11"),
            (23, "11"),
            (24, "11"),
            (27, "12"),
            (28, "11"),
            (28, "12"),
        }:
            return 0
        return 26

    mlp_2_1_outputs = [mlp_2_1(k0, k1) for k0, k1 in zip(positions, attn_2_1_outputs)]
    mlp_2_1_output_scores = classifier_weights.loc[
        [("mlp_2_1_outputs", str(v)) for v in mlp_2_1_outputs]
    ]

    feature_logits = pd.concat(
        [
            df.reset_index()
            for df in [
                token_scores,
                position_scores,
                attn_0_0_output_scores,
                attn_0_1_output_scores,
                mlp_0_0_output_scores,
                mlp_0_1_output_scores,
                attn_1_0_output_scores,
                attn_1_1_output_scores,
                mlp_1_0_output_scores,
                mlp_1_1_output_scores,
                attn_2_0_output_scores,
                attn_2_1_output_scores,
                mlp_2_0_output_scores,
                mlp_2_1_output_scores,
                one_scores,
            ]
        ]
    )
    logits = feature_logits.groupby(level=0).sum(numeric_only=True).to_numpy()
    classes = classifier_weights.columns.to_numpy()
    predictions = classes[logits.argmax(-1)]
    if tokens[0] == "<s>":
        predictions[0] = "<s>"
    if tokens[-1] == "</s>":
        predictions[-1] = "</s>"
    return predictions.tolist()


print(run(["<s>", "19", "22", "6", "26", "26", "21", "</s>"]))
